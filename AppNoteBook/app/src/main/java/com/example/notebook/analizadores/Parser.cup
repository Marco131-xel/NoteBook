package com.example.notebook.analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import com.example.notebook.abstracto.Instruccion;
import com.example.notebook.excepciones.Errores;
import com.example.notebook.simbolo.*;
import com.example.notebook.expresiones.*;
import com.example.notebook.instrucciones.*;

// CODIGO USUARIO
parser code {:
    Lexer s;
    parser(Lexer s){this.s =s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();

    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }
:};

action code {::};

// TERMINALES
terminal MAS, MENOS, POR, DIV, CARET, PAR1, PAR2, UMENOS;
terminal IGUAL, HASH, PUNTO, COMA;
terminal PRINT, FORMAT, PLOT;
terminal String CADENA, ENTERO, DECIMAL, IDENTIFICADOR;
terminal String HEADER;
terminal String TEXTO;
// NO TERMINALES
non terminal LinkedList<Instruccion>INICIO, INSTRUCCIONES;
non terminal Instruccion INSTRUCCION;
non terminal Instruccion IMPRESION;
non terminal Instruccion EXPRESION;
// PRECEDENCIA
precedence left MAS, MENOS;
precedence left POR, DIV;
precedence right CARET;
precedence left UMENOS;

// PRODUCCIONES Y GRAMATICAS
start with INICIO;

INICIO ::= INSTRUCCIONES:a {: RESULT = a; :};

INSTRUCCIONES ::= INSTRUCCION:a                 {: RESULT = new LinkedList<>(); RESULT.add(a); :}
                | INSTRUCCIONES:a INSTRUCCION:b {: RESULT = a; RESULT.add(b); :}
;

INSTRUCCION ::= IMPRESION:a {: RESULT = a; :}
;

IMPRESION ::= PRINT PAR1 EXPRESION:a PAR2 {: RESULT = new Print(a, aleft, aright); :}
;

EXPRESION ::= MENOS EXPRESION:a {: RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); :} %prec UMENOS
            | EXPRESION:a MAS EXPRESION:b   {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); :}
            | EXPRESION:a MENOS EXPRESION:b {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); :}
            | EXPRESION:a POR EXPRESION:b   {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); :}
            | EXPRESION:a DIV EXPRESION:b   {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); :}
            | EXPRESION:a CARET EXPRESION:b   {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); :}
            | ENTERO:a          {: RESULT = new Nativo(Integer.parseInt(a), new Tipo(TipoDato.ENTERO), aleft, aright ); :}
            | DECIMAL:a         {: RESULT = new Nativo(new Double(a), new Tipo(TipoDato.DECIMAL), aleft, aright ); :}
            | CADENA:a          {: RESULT = new Nativo(a, new Tipo(TipoDato.CADENA), aleft, aright ); :}
            | IDENTIFICADOR:a   {: RESULT = new AccesoVar(a, aleft, aright); :}
            | PAR1 EXPRESION:a PAR2 {: RESULT = a; :}
;
